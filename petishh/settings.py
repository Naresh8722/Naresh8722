"""
Django settings for petishh project.

Generated by 'django-admin startproject' using Django 3.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
# from email.policy import default
# import dj_database_url
# from decouple import petishh
# from dotenv import load_dotenv, find_dotenv
import logging
import os
# from pickle import TRUE
from pathlib import Path
import datetime

# import django


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
TEMPLATES_DIR=os.path.join(BASE_DIR,'templates')

MEDIA_ROOT =  os.path.join(BASE_DIR, 'image') 
MEDIA_URL = '/image/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
SECRET_KEY = 'django-insecure-l*g6$bwkkxgcn1s@uf(+29eo8l(wlxyk*^xx2%=91kpw+6tgu)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
TEMPLATE_DEBUG = True 

ALLOWED_HOSTS = ['petishh.herokuapp.com','127.0.0.1'] #'petishh.herokuapp.com','127.0.0.1'
# Application definition

INSTALLED_APPS = [
    # 'whitenoise.runserver_nostatic',
    'jazzmin',
    # 'adminlte3',
    # 'adminlte3_theme',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    # 'django.contrib.staticfiles',
    'django_extensions',
    'drf_yasg',
    'rest_framework',
    # 'phonenumber_field',
    'django_countries',
    'randompinfield',

    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'django.contrib.sites',
	'django_filters',
    'allauth',
    'allauth.account',
    'corsheaders',
    'oauth2_provider',
    'dj_rest_auth',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
    'user',
    'products',
    'cart',
    'discounts',
    'Grooming',
    'fcm_django',
    'Doctor',
    'Training',
    'knox',
    'django_rest_passwordreset',
    
    'rest_framework_swagger',
    # 'order',
    'rest_framework_simplejwt.token_blacklist',
    'socialauthapp',
        
]


SOCIALACCOUNT_PROVIDERS =  { 'facebook':
        { 'SCOPE': ['email', 'publish_stream'],
            'AUTH_PARAMS': { 'auth_type': 'reauthenticate' },
            'METHOD': 'oauth2' ,
            'LOCALE_FUNC': 'path.to.callable'} }
SITE_ID = 2
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES':['rest_framework.permissions.AllowAny',],
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTTokenUserAuthentication',
    ),
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': datetime.timedelta(hours=24*7),
    'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=1),
    'ROTATE_REFRESH_TOKENS':False,
    
}



REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ]
}

# CORS_ALLOWED_ORIGINS = [
#     # '192.168.1.16'
# # "http://www.website.com",

# # "http://localhost:3000",
# # "http://localhost:4200",
# # "https://web.postman.co",
# # "https://example.com",
# # "https://sub.example.com",
# # "http://localhost:8080",
# # "http://127.0.0.1:9000",
# ]

CORS_ALLOW_METHODS = [
"GET",
"PUT",
"DELETE",
"POST",
"OPTIONS",
"PATCH",
]
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_UNIQUE_EMAIL = True


ACCOUNT_CONFIRM_EMAIL_ON_GET = True
LOGIN_URL = '/'
# CORS_ALLOWED_ORIGINS=True
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'debug_toolbar.middleware.DebugToolbarMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
    
]
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
CORS_ORIGIN_ALLOW_ALL = True
ROOT_URLCONF = 'petishh.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.media',
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
            ],
        },
        
    },
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',
        'DIRS': [
            '/home/html/jinja2',
        ],
    },
]

WSGI_APPLICATION = 'petishh.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases
# load_dotenv(find_dotenv())
# DATABASES={'default':dj_database_url.config(default='sqlite:///db.sqlite3',conn_max_age=600)}

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# import dj_database_url

# db_from_env = dj_database_url.config(conn_max_age=600)
# DATABASES['default'].update(db_from_env)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', 
        'NAME': 'petish',
        'USER': 'root',
        'PASSWORD': 'root123',
        'HOST': 'localhost',   # Or an IP Address that your DB is hosted on
        'PORT': '3306',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTH_USER_MODEL = 'user.Users'

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-Us'

TIME_ZONE = 'UTC'
# TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
# PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]
MEDIA_URL = '/media/'
MEDIA_ROOT=os.path.join(BASE_DIR, "media/")
# pathx = (os.path.join(os.path.dirname(BASE_DIR), 'static'))

# LOGGING={
#     "version":1,
#     "disable_existing_loggers":False,
#     "handlers":{
#         "console":{"class":"logging.StreamHandler"}
#     },
#     "loggers":{
#         "":{"handlers":["console"], "level":"INFO"},
#         "django":{"handlers": ["console"], "level":"INFO"},
#     },

# }


# django_heroku.settings(locals(), logging=False)


# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_HOST_USER = 'naresh11021@gmail.com'
EMAIL_HOST_PASSWORD = 'qrbowiisdwrviswg'
# EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
# EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')
# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
  
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
    'social_core.backends.facebook.FacebookOAuth2',
]


from datetime import timedelta

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



# Facebook configuration
SOCIAL_AUTH_FACEBOOK_KEY ='1100027347426993'
SOCIAL_AUTH_FACEBOOK_SECRET = 'cadc3acc84772f1e09805b5ed7b6e504'
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
# Define SOCIAL_AUTH_FACEBOOK_SCOPE to get extra permissions from facebook. Email is not sent by default, to get it, you must request the email permission:
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
'fields': 'id, name, email' }
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
FACEBOOK_EXTENDED_PERMISSIONS = ['email']
SOCIAL_AUTH_ADMIN_USER_SEARCH_FIELDS = ['username', 'first_name', 'email']
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
SOCIAL_AUTH_PIPELINE = (
'social_core.pipeline.social_auth.social_details',
'social_core.pipeline.social_auth.social_uid',
'social_core.pipeline.social_auth.auth_allowed',
'social_core.pipeline.social_auth.social_user',
'social_core.pipeline.user.get_username',
'social_core.pipeline.social_auth.associate_by_email',
'social_core.pipeline.user.create_user',
'social_core.pipeline.social_auth.associate_user',
'social_core.pipeline.social_auth.load_extra_data',
'social_core.pipeline.user.user_details', )

import os
OAUTH2_PROVIDER = {
    "OIDC_ENABLED": True,
    "OIDC_RSA_PRIVATE_KEY": os.environ.get("OIDC_RSA_PRIVATE_KEY"),
    "SCOPES": {
        "openid": "OpenID Connect scope",
        # ... any other scopes that you use
    },
    # ... any other settings you want
}

OAUTH2_PROVIDER = {
    "OIDC_ENABLED": True,
    "SCOPES": {
        "openid": "OpenID Connect scope",
        # ... any other scopes that you use
    },
    # ... any other settings you want
}


# OAUTH2_PROVIDER = {
#     "OAUTH2_VALIDATOR_CLASS": "my_project.oauth_validators.CustomOAuth2Validator",
#     # ... other settings
# }

STRIPE_PUBLIC_KEY = ('STRIPE_TEST_PUBLIC_KEY')
STRIPE_SECRET_KEY = ('STRIPE_TEST_SECRET_KEY')






JAZZMIN_SETTINGS = {
    # title of the window (Will default to current_admin_site.site_title if absent or None)
    "site_title": "Petishh Admin",

    # Title on the login screen (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_header": "Petishh",

    # Title on the brand (19 chars max) (defaults to current_admin_site.site_header if absent or None)
    "site_brand": "Petishh",

    # Logo to use for your site, must be present in static files, used for brand on top left
    "site_logo": "../media/pet2.png",

    # CSS classes that are applied to the logo above
    "site_logo_classes": "img",
    

    # Relative path to a favicon for your site, will default to site_logo if absent (ideally 32x32 px)
    "site_icon": None,

    # Welcome text on the login screen
    "welcome_sign": "Welcome to the Petishh",

    # Copyright on the footer
    "copyright": "Petishh",


    # The model admin to search from the search bar, search bar omitted if excluded
    # "search_model": "auth.User",
    "search_model" :"user.users",
    # Field name on user model that contains avatar ImageField/URLField/Charfield or a callable that receives the user
    "user_avatar":None,

    ############
    # Top Menu #
    ############

    # Links to put along the top menu
    "topmenu_links": [

        # Url that gets reversed (Permissions can be added)
        {"name": "Home",  "url": "admin:index", "permissions": ["auth.view_user"]},

        # external url that opens in a new window (Permissions can be added)
        # {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},

        # model admin to link to (Permissions checked against model)
        # {"model": "auth.User"},
        # {"model":"user.users"},

        # App with dropdown menu to all its models pages (Permissions checked against models)
        {"app": "cart"},
        {"app":"products"},
        {"app":"user"},
        {"app":"Doctor"},
        {"app":"Grooming"},

    ],
    

    #############
    # User Menu #
    #############

    # Additional links to include in the user menu on the top right ("app" url type is not allowed)
    "usermenu_links": [
        # {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},
        # {"model": "auth.user"},
        {"model":"cart.Cart"},
        {"model":"user.users"},
        # {"model":""}
        
    ],

    #############
    # Side Menu #
    #############

    # Whether to display the side menu
    "show_sidebar": True,

    # Whether to aut expand the menu
    "navigation_expanded": False,

    # Hide these apps when generating side menu e.g (auth)
    "hide_apps": ["Django_Rest_Passwordreset","token_blacklist","fcm_django","knox","oauth2_provider"],

    # Hide these models when generating side menu (e.g auth.user)
    "hide_models": [],

    # List of apps (and/or models) to base side menu ordering off of (does not need to contain all apps/models)
    "order_with_respect_to": [ "Cart","Products", "User", "Doctor","Training","Grooming", "discounts","socialaccount","Sites"],

    # Custom links to append to app groups, keyed on app name
    "custom_links": {
        "cart": [{
            "name": "Cart", 
            "url": "/admin/cart/", 
            "icon": "fas fa-cart-plus",
            "permissions": ["cart.view_cart"]
        }]
    },

    # Custom icons for side menu apps/models See https://fontawesome.com/icons?d=gallery&m=free&v=5.0.0,5.0.1,5.0.10,5.0.11,5.0.12,5.0.13,5.0.2,5.0.3,5.0.4,5.0.5,5.0.6,5.0.7,5.0.8,5.0.9,5.1.0,5.1.1,5.2.0,5.3.0,5.3.1,5.4.0,5.4.1,5.4.2,5.13.0,5.12.0,5.11.2,5.11.1,5.10.0,5.9.0,5.8.2,5.8.1,5.7.2,5.7.1,5.7.0,5.6.3,5.5.0,5.4.2
    # for the full list of 5.13.0 free icon classes
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
    },

        "icons": {
        "Cart": "fa fa-shopping-cart fa-border fa-3x",
        "Cart.Cart": "fas fa-cart-plus",
        "cart.Orders": "fas fa-shopping-basket",
        "cart.payment":"fas Fa-money-check-alt",
        "cart.UserProfile" :"fas fa-users",
        "cart.Address":"fas fa-shipping-fast",

        "products": "fab fa-product-hunt fa-border fa-3x",
        "products.product": "fab fa-product-hunt ",
        "products.Category": "fa fa-list-alt",
        "products.Banner": "fa fa-image",

        "User":"fa fa-user fa-border fa-3x",
        "User.Users":"fa fa-users",

        "Doctor":"fas fa-clinic-medical fa-border fa-3x",
        "Doctor.Doctor":"fas fa-user-md",
        "Doctor.Appointment":"fa fa-calendar",

        "Training":"fas fa-chalkboard-teacher fa-border fa-3x",
        "Training.AdvancedTraining":"fas fa-solid fa-dog",
        "Training.BasicTraining":"fas fa-light fa-dog",
        # "Training.Enquireform":"fas fa-wpforms",

        "Account":"fas fa-user",
        "Account.Emailaddress":"fa fa-thin fa-at",

        "authtoken":"fas fa-coins",
        "authtoken.tokenproxy":"fas fa-coins",

        "Auth":"fas fas fa-users",
        "Auth.group":"fas fa-users ",

        "discounts":"fas fa-percent",
        "discounts.campaign":"fas fa-tag", 
        "discounts.coupon":"fas fa-tags",

        "fcm_django":"fas fa-mobile",
        "fcm_django.fcmdevice":"fas fa-mobile",
        "Grooming":"fas fa-cut",
        "Grooming.bugrecue":"fas fa-bug",
        "Grooming.happyandshiny":"fas fa-bath",
        "Grooming.groomerbookingslot":"fas fa-book",
        "Grooming.groomer":"fas fa-user",
        "Grooming.hygienicpamper":"fas fa-toilet-paper",
        "Grooming.shinyandbugfree":"fas fa-bacteria",

        "Sites":"fas fa-sitemap",
        "Sites.site":"fas fa-globe",

        "socialaccount":"fas fa-hashtag",
        "socialaccount.socialaccount":"fas fa-user",
        "socialaccount.socialtoken":"fas fa-coins",
        "socialaccount.socialapp":"fas fa-hashtag",
        
        "token_blacklist":"fas fa-ban",
        "token_blacklist.blacklistedtoken":"fas fa-ring",


    },


    # Icons that are used when one is not manually specified
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",

    #################
    # Related Modal #
    #################
    # Use modals instead of popups
    "related_modal_active": False,

    #############
    # UI Tweaks #
    #############
    # Relative paths to custom CSS/JS scripts (must be present in static files)
    "custom_css": None,
    "custom_js": None,
    # Whether to show the UI customizer on the sidebar
    "show_ui_builder": False,

    ###############
    # Change view #
    ###############
    # Render out the change view as a single form, or in tabs, current options are
    # - single
    # - horizontal_tabs (default)
    # - vertical_tabs
    # - collapsible
    # - carousel
    "changeform_format": "horizontal_tabs",
    # override change forms on a per modeladmin basis
    "changeform_format_overrides": {"auth.user": "collapsible", "auth.group": "vertical_tabs"},
    # Add a language dropdown into the admin
    "language_chooser": False,   
}

# JAZZMIN_UI_TWEAKS = {
#     "navbar_small_text": False,
#     "footer_small_text": False,
#     "body_small_text": True,
#     "brand_small_text": False,
#     "brand_colour": "navbar-light",
#     "accent": "accent-info",
#     "navbar": "navbar-dark",
#     "no_navbar_border": True,
#     "navbar_fixed": False,
#     "layout_boxed": False,
#     "footer_fixed": False,
#     "sidebar_fixed": True,
#     "sidebar": "sidebar-light-warning",
#     "sidebar_nav_small_text": False,
#     "sidebar_disable_expand": False,
#     "sidebar_nav_child_indent": True,
#     "sidebar_nav_compact_style": True,
#     "sidebar_nav_legacy_style": False,
#     "sidebar_nav_flat_style": False,
#     "theme": "default",
#     "dark_mode_theme": "darkly",
#     "button_classes": {
#         "primary": "btn-primary",
#         "secondary": "btn-secondary",
#         "info": "btn-info",
#         "warning": "btn-warning",
#         "danger": "btn-outline-danger",
#         "success": "btn-success"
#     },
#     "actions_sticky_top": True
# }

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": True,
    "brand_small_text": False,
    "brand_colour": "navbar-navy",
    "accent": "accent-info",
    "navbar": "navbar-navy navbar-dark",
    "no_navbar_border": True,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-navy",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": True,
    "sidebar_nav_compact_style": True,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "default",
    "dark_mode_theme": "darkly",
    "button_classes": {
        "primary": "btn-primary",
        "secondary": "btn-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-outline-danger",
        "success": "btn-success"
    },
    "actions_sticky_top": True
}
